/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c CommandManagerInterface -p dbusinterface/commandmanager_interface commandmanager.xml
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef COMMANDMANAGER_INTERFACE_H
#define COMMANDMANAGER_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.filemanager.daemon.CommandManager
 */
class CommandManagerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.filemanager.daemon.CommandManager"; }

public:
    CommandManagerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~CommandManagerInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool, QString, QString> process(const QString &cmd, const QStringList &args)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(cmd) << QVariant::fromValue(args);
        return asyncCallWithArgumentList(QStringLiteral("process"), argumentList);
    }
    inline QDBusReply<bool> process(const QString &cmd, const QStringList &args, QString &output, QString &error)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(cmd) << QVariant::fromValue(args);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("process"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 3) {
            output = qdbus_cast<QString>(reply.arguments().at(1));
            error = qdbus_cast<QString>(reply.arguments().at(2));
        }
        return reply;
    }

    inline QDBusPendingReply<bool> startDetached(const QString &cmd, const QStringList &args)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(cmd) << QVariant::fromValue(args);
        return asyncCallWithArgumentList(QStringLiteral("startDetached"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace deepin {
    namespace filemanager {
      namespace daemon {
        typedef ::CommandManagerInterface CommandManager;
      }
    }
  }
}
#endif

/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -i ../partman/partition.h -c DeviceInfoManagerInterface -p dbusinterface/deviceinfomanager_interface deviceinfo.xml
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DEVICEINFOMANAGER_INTERFACE_H
#define DEVICEINFOMANAGER_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "../partman/partition.h"

/*
 * Proxy class for interface com.deepin.filemanager.daemon.DeviceInfoManager
 */
class DeviceInfoManagerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.filemanager.daemon.DeviceInfoManager"; }

public:
    DeviceInfoManagerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~DeviceInfoManagerInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<PartMan::Partition> getPartitionByDevicePath(const QString &devicePath)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(devicePath);
        return asyncCallWithArgumentList(QStringLiteral("getPartitionByDevicePath"), argumentList);
    }

    inline QDBusPendingReply<bool, qlonglong, qlonglong> readUsage(const QString &path)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(path);
        return asyncCallWithArgumentList(QStringLiteral("readUsage"), argumentList);
    }
    inline QDBusReply<bool> readUsage(const QString &path, qlonglong &freespace, qlonglong &total)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(path);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("readUsage"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 3) {
            freespace = qdbus_cast<qlonglong>(reply.arguments().at(1));
            total = qdbus_cast<qlonglong>(reply.arguments().at(2));
        }
        return reply;
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace deepin {
    namespace filemanager {
      namespace daemon {
        typedef ::DeviceInfoManagerInterface DeviceInfoManager;
      }
    }
  }
}
#endif
